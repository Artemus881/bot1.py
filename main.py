from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '8400720613:AAHUxRixbHWQhP-XKEEob2gS1wJp5pSd_YI'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Deal(StatesGroup):
    waiting_for_amount = State()

deals = {}

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    text = message.text.strip()
    parts = text.split(" ")
    
    if len(parts) > 1 and parts[1].startswith("join_"):
        owner_id_str = parts[1].replace("join_", "")
        try:
            owner_id = int(owner_id_str)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            return

        if str(owner_id) not in deals:
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
            return

        if 'partner_id' in deals[str(owner_id)]:
            await message.answer("‚ö† –í —Å–¥–µ–ª–∫—É —É–∂–µ –≤—Å—Ç—É–ø–∏–ª –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
            return

        deals[str(owner_id)]['partner_id'] = message.from_user.id
        deals[str(owner_id)]['partner_confirmed'] = False
        deals[str(owner_id)]['owner_confirmed'] = False
        deals[str(owner_id)]['payment_confirmed'] = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥

        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–¥–µ–ª–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID {owner_id}.")

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{owner_id}"),
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_owner_{owner_id}")
        )
        try:
            await bot.send_message(owner_id,
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.id} –≤—Å—Ç—É–ø–∏–ª –≤ —Å–¥–µ–ª–∫—É.\n\n–í–æ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–æ–π:",
                reply_markup=keyboard)
        except:
            pass

        keyboard_partner = InlineKeyboardMarkup(row_width=1)
        keyboard_partner.add(
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_partner_{owner_id}")
        )
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É:", reply_markup=keyboard_partner)
        return

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–≥–∞—Ä–∞–Ω—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º.\n\n–ù–∞–ø–∏—à–∏, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –±—É–¥–µ—Ç —Å–¥–µ–ª–∫–∞ (–æ—Ç 25 –¥–æ 10000):")
    await Deal.waiting_for_amount.set()

@dp.message_handler(state=Deal.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 25 or amount > 10000:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 25 –¥–æ 10000.")
        return

    owner_id = message.from_user.id
    deals[str(owner_id)] = {
        'amount': amount,
        'partner_confirmed': False,
        'owner_confirmed': False,
        'payment_confirmed': False
    }

    bot_username = (await bot.get_me()).username

    join_link = f"https://t.me/{bot_username}?start=join_{owner_id}"

    await message.answer(
        f"–°–¥–µ–ª–∫–∞ –Ω–∞ {amount} –∑–≤—ë–∑–¥ —Å–æ–∑–¥–∞–Ω–∞.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–Ω—ë—Ä—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n{join_link}"
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(("confirm_owner_", "confirm_partner_", "pay_")))
async def process_callback_confirm_pay(callback_query: CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data.startswith("confirm_owner_"):
        owner_id = int(data.split("_")[-1])
        if str(owner_id) not in deals:
            await callback_query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
            return

        if user_id != owner_id:
            await callback_query.answer("‚ö† –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–¥–µ–ª–∫–∏ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–∏–º.", show_alert=True)
            return

        deal = deals[str(owner_id)]

        # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        if not deal['payment_confirmed']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç—É–ø–∏–ª –ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –æ–Ω —Å–¥–µ–ª–∫—É
            partner_id = deal.get('partner_id')
            if partner_id is None:
                await callback_query.answer("‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –≤—Å—Ç—É–ø–∏–ª –≤ —Å–¥–µ–ª–∫—É.", show_alert=True)
                return
            if not deal.get('partner_confirmed'):
                await callback_query.answer("‚ö† –ü–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É.", show_alert=True)
                return

            # –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–≤—ë–ª –∑–≤—ë–∑–¥—ã ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            deal['payment_confirmed'] = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            amount = deal['amount']
            await bot.send_message(partner_id,
                f"‚úÖ –°–¥–µ–ª–∫–∞ –Ω–∞ {amount}‚≠ê —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª {amount} –∑–≤–µ–∑–¥.\n"
                f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–ª–∞—Ç—É, –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @meneger_garantbott\n"
                f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")

            await callback_query.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
        await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É.", show_alert=True)


    elif data.startswith("confirm_partner_"):
        owner_id = int(data.split("_")[-1])
        if str(owner_id) not in deals:
            await callback_query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.", show_alert=True)
            return

        deal = deals[str(owner_id)]
        partner_id = deal.get('partner_id')

        if user_id != partner_id:
            await callback_query.answer("‚ö† –¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω—ë—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–∏–º.", show_alert=True)
            return

        if deal['partner_confirmed']:
            await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–¥–µ–ª–∫—É.", show_alert=True)
            return

        deal['partner_confirmed'] = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –∑–≤—ë–∑–¥—ã
        await callback_query.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–¥–µ–ª–∫—É.")
        await bot.send_message(partner_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –≤–∞–º –∑–≤—ë–∑–¥—ã.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É (–µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç)
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{owner_id}"),
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_owner_{owner_id}")
        )
        await bot.send_message(owner_id, "–ü–∞—Ä—Ç–Ω—ë—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥:", reply_markup=keyboard)


    elif data.startswith("pay_"):
        owner_id = int(data.split("_")[-1])
        if user_id != owner_id:
            await callback_query.answer("‚ö† –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–¥–µ–ª–∫–∏ –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å.", show_alert=True)
            return
        await callback_query.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", show_alert=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
